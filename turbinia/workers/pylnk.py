# -*- coding: utf-8 -*-
# Copyright 2015 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Task for running Pylnk."""

from __future__ import unicode_literals

import codecs
import os
import subprocess

from turbinia import TurbiniaException

import pylnk

from turbinia.evidence import ReportText
from turbinia.lib.utils import extract_filetype
from turbinia.workers import TurbiniaTask


class PylnkTask(TurbiniaTask):
  """Task to run Pylnk."""

  def _AnalyzePylnkRoot(self, collected_files):
    """
    Args:
      collected_files(list(str)): a list of paths to extracted files
    Returns:
      list(str): the result report, as a list of lines.
    """
    report = []
    strings_report = []
    for filepath in collected_files:
      strings_report.append("******************\nLNK info for {0:s}:\n".format(filepath))
      proc = subprocess.Popen(
          ['/usr/bin/lnkinfo', filepath],
          stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
      strings_output, _ = proc.communicate()
      strings_output = codecs.decode(strings_output, 'utf-8')
      strings_report.append(strings_output)

    report = "\n\n".join(strings_report)

    return report

  def run(self, evidence, result):
    """Task that process data with Pylnk.

    Args:
        evidence: Path to data to process.
        result: A TurbiniaTaskResult object to place task results into.

    Returns:
        TurbiniaTaskResult object.
    """
    # What type of evidence we should output.
    output_evidence = ReportText()

    # Where to store the resulting output file.
    output_file_name = 'lnk_analysis.txt'
    output_file_path = os.path.join(self.output_dir, output_file_name)

    output_evidence.local_path = output_file_path

    try:
      # We don't use FileArtifactExtractionTask as it export one evidence per
      # file extracted
      collected_files = extract_filetype(
          extensions=['lnk'],
          disk_path=evidence.local_path,
          output_dir=os.path.join(self.output_dir, 'artifacts')
      )

      text_report_lines = self._AnalyzePylnkRoot(collected_files)
      if not text_report_lines:
        raise TurbiniaException(
            'Report generated by  _AnalyzePylnkRoot() is empty')

      output_evidence.text_data = text_report_lines
      # Write the report to the output file.
      with open(output_file_path, 'w') as fh:
        fh.write(output_evidence.text_data.encode('utf8'))
        fh.write('\n'.encode('utf8'))

      result.add_evidence(output_evidence, evidence.config)
      result.close(self, success=True, status=text_report_lines[0])
    except TurbiniaException as e:
      result.close(self, success=False, status=str(e))
      return result
    return result
